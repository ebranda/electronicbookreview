<?php

/**
 * @file
 * Provides a demonstration of using the Dialog API.
 */

/**
 * Implementation of hook_menu().
 */
function ebr_tests_menu() {
  // Normal menu callback.
  $items['tests/start-page'] = array(
    'title' => 'Tests',
    'description' => 'A demonstration of the Dialog module.',
    'page callback' => 'ebr_tests_start_page',
    //'page arguments' => array('ebr_tests_start_page'),
    'access arguments' => array('access content'),
  );
  // Normal menu callback.
/*
  $items['run-migrate-authors'] = array(
    'title' => 'Migrate author names',
    'description' => 'Migrate all noderef author names in glosses to field_author_name plain text.',
    'page callback' => 'ebr_migrate_authors_page',
    'access arguments' => array('administer content'),
  );
*/
	$items['tests/run-migrate-glosses'] = array(
	    'title' => 'Migrate glosses',
	    'description' => 'Migrate all glosses.',
	    'page callback' => 'ebr_migrate_glosses',
	    'access arguments' => array('administer content'),
	  );
  return $items;
}

function ebr_tests_node_view($node, $view_mode) {
	if ($view_mode == 'full') {
		//dpm($node);
	}
}

/**
 * Menu callback for our dialog example page.
 */
function ebr_tests_start_page() {
  return l('Run migrate glosses (be sure you want to do this. Make backup of db first.)', 'tests/run-migrate-glosses');
}

function ebr_migrate_glosses() {
	$result = db_query("SELECT n.nid FROM {node} n WHERE n.type = 'gloss'");
	foreach ($result as $record) {
	  	$gloss = node_load($record->nid);
		if (empty($gloss->field_gloss_path['und'])) {
			dpm("No path field in gloss ".$gloss->nid);
			node_delete($gloss->nid);
			continue;
		}
		$old_path = $gloss->field_gloss_path['und'][0]['value'];
		if (is_numeric($old_path)) {
			$new_path = 'P:nth-child('.(intval($old_path)+1).')';
			dpm("Changing $old_path to $new_path for gloss ".$gloss->nid);
			$gloss->field_gloss_path['und'][0]['value'] = $new_path;
			node_save($gloss);
		} else if (strpos($old_path, 'nth-child') === FALSE) {
			dpm("Illegal path in gloss ".$gloss->nid. " [$old_path]");
			node_delete($gloss->nid);
		}
	}
	return 'Done';
}

/*
function ebr_migrate_authors_page() {
	$result = db_query("SELECT n.nid FROM {node} n WHERE n.type = 'gloss'");
	$output = '<ul>';
	foreach ($result as $record) {
	  	$gloss = node_load($record->nid);
		$author = node_load($gloss->field_author['und'][0]['nid']);
		if (!empty($author)) {
			$author_name = $author->title;
			$gloss->field_author_name['und'][0]['value'] = $author_name;
			node_save($gloss);
			$output .= "<li>Moved author $author_name </li>";
		} else {
			$output .= "<li>Unable to find author for gloss $gloss->nid </li>";
		}
	}
	return $output.'</ul>';
}
*/










