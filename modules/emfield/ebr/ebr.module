<?php

require_once 'includes/ebr.block.inc';
require_once 'includes/ebr.action.inc';
require_once 'includes/ebr.mail.inc';

/**
 * Implements hook_node_presave().
 */
function ebr_node_presave($node) {
  	_ebr_pathauto($node);
}

/*
 * A workaround for limitations in the Pathautho module's
 * ability to use field values in the node's path.
 */
function _ebr_pathauto(&$node) {
  switch ($node->type) {
    case 'essay':
      // Build the essay url path alias (since Pathauto won't allow enough 
      // control to insert the thread name into the path). Note that the
      // Pathauto module settings leave the essay rule blank so as not
      // to stomp on the path created here.
      if (isset($node->field_thread)) {
        $node->path['alias'] = _ebr_essay_path($node);
      }
      break;
    // Build the thread url path alias (since Pathauto doesn't seem to work).
    // Note that the Pathauto module settings leave the thread rule blank 
    // so as not to stomp on the path created here.
    case 'thread':
      if (isset($node->field_name['und'][0]['value'])) {
        $node->path['alias'] = "thread/".$node->field_name['und'][0]['value'];
      }
      break;
  }
}

function _ebr_essay_path($essay_node) {
	if (is_numeric($essay_node)) {
		$essay_node = node_load($essay_node);
	}
  $thread = node_load($essay_node->field_thread['und'][0]['nid']);
  $thread_name = $thread->field_name['und'][0]['value'];
  $essay_name = $essay_node->field_name['und'][0]['value'];
  return "thread/$thread_name/$essay_name";
}

function _ebr_gloss_url($gloss_node, $absolute=FALSE) {
	$essay_nid = $gloss_node->field_essay['und'][0]['nid'];
	$gloss_nid = $gloss_node->nid;
	return url(_ebr_essay_path($essay_nid), array('absolute'=>$absolute, 'query'=>array('gloss'=>$gloss_nid)));
}

function ebr_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $function = __FUNCTION__ . '_' . $node->type;
    if (function_exists($function)) {
      $function($node);
    }
  }
}

function ebr_node_load_essay(&$node) {
  // Add thread fields for convenience for other functions
  if (!empty($node->field_thread['und'][0]['nid'])) {
    $node->thread = node_load($node->field_thread['und'][0]['nid']);
    $node->thread_name = $node->thread->field_name['und'][0]['value'];
  }
}

/*
 * Implements hook_node_view()
 */
function ebr_node_view($node, $view_mode) {
  $function = __FUNCTION__ . '_' . $node->type;
  if (function_exists($function)) {
    $function($node);
  }
  $function = __FUNCTION__ . '_' . $node->type . '_' . $view_mode;
  if (function_exists($function)) {
    $function($node);
  }
}

function ebr_node_view_essay(&$node) {
  // Hide the author field and blurb if the essay is under review or not yet published.
  if (!_ebr_allow_display_of_extra_essay_content($node)) {
    $node->body['und'][0]['summary'] = '';
    $node->body['und'][0]['safe_summary'] = '';
    $node->content['field_author']['#access'] = FALSE;
  }
  // Hide the "add comment" link at foot of essay
  unset($node->content['links']['comment']);
}

/*
 * Implements hook_comment_view()
 * Dispatches to helper functions.
 */
function ebr_comment_view($comment, $view_mode, $langcode) {
  $node = node_load($comment->nid);
  if (empty($node)) return;
  $function = __FUNCTION__ . '_' . $node->type;
  if (function_exists($function)) {
    $function($comment, $node);
  }
  $function = __FUNCTION__ . '_' . $node->type . '_' . $view_mode;
  if (function_exists($function)) {
    $function($comment, $node);
  }
}

/*
 * Helper function for essay hook_comment_view()
 * Mainly concerned with implementing comment visibility rules
 * to support the P2P review process.
 */
function ebr_comment_view_essay(&$comment, &$essay) {
  if (_ebr_user_is_editor()) {
    return;
  }
  $hide_comment = FALSE;
  if (_ebr_workflow_under_p2p_review($essay)) {
    global $user;
    $comment_written_by_user = $user->uid == $comment->uid;
    if (!$comment_written_by_user) {
      $hide_comment = TRUE;
    }
  } else if (_ebr_workflow_published($essay)) {
    $history = workflow_get_workflow_node_history_by_nid($essay->nid);
    if (!empty($history)) {
      // TODO: is there a Workflow API function to do this date checking?
      $last_transition = $history[0];
      $date_essay_published = $last_transition->stamp;
      $date_comment_published = $comment->created;
      if ($date_comment_published < $date_essay_published) {
        $hide_comment = TRUE;
      }
    }
  }
  if ($hide_comment) {
    $comment->content['#access'] = FALSE;
  }
}

function ebr_node_view_essay_teaser(&$node) {
  if (!_ebr_allow_display_of_extra_essay_content($node)) {
    $node->content['body']['#access'] = FALSE;
  }
}

function _ebr_allow_display_of_extra_essay_content_blocks() {
  if (arg(0) != 'node' || !is_numeric(arg(1))) return FALSE; // We are not on a node page
  $node = menu_get_object();
  if (isset($node->type) && $node->type != 'essay') return FALSE; // We are not on an essay page
  return _ebr_allow_display_of_extra_essay_content($node);
}

function _ebr_allow_display_of_extra_essay_content($node = NULL) {
  if (empty($node)) {
    $node = menu_get_object();
  }
  if (_ebr_user_is_editor()) return TRUE; // Always show all content to editors
  if (_ebr_workflow_published($node)) return TRUE; // Always show all content for published nodes
  return FALSE; // Hide extra essay content in all other cases 
}

function _ebr_workflow_under_p2p_review($node) {
  if (empty($node)) return FALSE;
  return _ebr_get_workflow_state_id($node) == 3;
}

function _ebr_workflow_published($node) {
  if (empty($node)) return FALSE;
  return _ebr_get_workflow_state_id($node) == 6;
}

function ebr_node_view_gloss_teaser(&$node) {
  // Hide title from gloss teaser views
  $node->title = '';
  // Hide the blurb if the essay is under review and user is not editor.
  // Actually, p2p reviewers should never see glosses
  // if (!_ebr_allow_display_of_extra_essay_content()) {
  //     $node->content['body']['#access'] = FALSE;
  //   }
}

/**
 * Helper function to determine whether the node's fields should
 * be hidden based on the fact that a peer reviewer is viewing
 * an essay under review.
 */
function _ebr_enforce_peer_review_view($node) {
  return 
    _ebr_workflow_under_p2p_review($node) && 
    _ebr_user_is_reviewer() &&
    !_ebr_user_is_editor();
}

function _ebr_user_is_reviewer() {
  return in_array('reviewer', $GLOBALS['user']->roles);
}

function _ebr_user_is_editor() {
  return
    in_array('editor', $GLOBALS['user']->roles) ||
    in_array('thread editor', $GLOBALS['user']->roles) ||
    in_array('administrator', $GLOBALS['user']->roles);
}

function _ebr_user_is_admin() {
  return in_array('administrator', $GLOBALS['user']->roles);
}

function _ebr_get_workflow_state_id($node) {
  return workflow_node_current_state($node);
}

function _ebr_get_workflow_state_label($node) {
  $state_id = _ebr_get_workflow_state_id($node);
  $state = workflow_get_workflow_states_by_sid($state_id);
  return empty($state) ? '' : $state->state;
}


/**
 * Implements hook_form_essay_form_alter().
 */
function ebr_form_essay_node_form_alter(&$form, &$form_state, $id) {
  $form['#validate'][] = '_ebr_short_name_validate';
  // Set default format for essay body form field to Full HTML
  // so users don't have to do it manually.
  $form['body']['und'][0]['#format'] = "full_html";
  $form['title']['#description'] = 'The only allowable HTML markup is the <em></em> tag (for book titles).';
}

/**
 * Implements hook_form_comment_form_alter().
 */
function ebr_form_comment_form_alter(&$form, &$form_state, $id) { 
  // Only show the accept/reject choice field when the essay
  // is in review state and the user is a reviewer
  $show_accept_reject_field = FALSE;
  $essay = node_load($form['nid']['#value']);
  if (_ebr_user_is_reviewer() && _ebr_workflow_under_p2p_review($essay)) {
    $show_accept_reject_field = TRUE;
    $form['actions']['submit']['#value'] = t('Submit comments and recommendation');
  } else {
    $form['actions']['submit']['#value'] = t('Submit comment');
  }
  $form['field_y_n']['#access'] = $show_accept_reject_field;
  if (!$show_accept_reject_field) {
    $form['field_y_n']['und']['#required'] = FALSE;
  }
  //$form['field_y_n']['und']['#options']['_none'] = 'No recommendation';
}

/**
 * Implements hook_form_thread_form_alter().
 */
function ebr_form_thread_node_form_alter(&$form, &$form_state, $id) {
  $form['#validate'][] = '_ebr_short_name_validate';
}

/*
 * Helper function to validate the uniqueness of 
 * the short name of essays and threads.
 */
function _ebr_short_name_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['field_name']['und'][0]['value'])) {
    $name = $form_state['values']['field_name']['und'][0]['value'];
    $node_type = $form_state['node']->type;
    // Search for all existing nodes with this short name
    $sql = "SELECT entity_id FROM field_data_field_name WHERE bundle = '$node_type' AND field_name_value = '$name'";
    // If we are editing an existing node then ignore the node itself
    if (!empty($form_state['values']['nid'])) {
      $sql .= " AND entity_id <> ".$form_state['values']['nid'];
    }
    $results = db_query($sql);
    foreach ($results as $record) {
      if ($node_type == 'essay') {
        // For essays, the short name must be unique within the selected primary thread.
        if (!empty($form_state['values']['field_thread']['und'][0]['nid'])) {
          $essay = node_load($record->entity_id);
          $thread_nid = $form_state['values']['field_thread']['und'][0]['nid'];
          if (!empty($essay) && $thread_nid == $essay->field_thread['und'][0]['nid']) {
            form_set_error('field_name', 'The specified short name is already taken by another essay.');
            break;
          }
        }
      } else if ($node_type == 'thread') {
        // For threads, the short name must be unique within all threads.
        form_set_error('field_name', 'The specified short name is already taken by another thread.');
        break;
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function ebr_permission() {
  return array(
    'administer ebr content' => array(
      'title' => t('Administer EBR content'),
      'description' => t('Perform editorial functions on EBR content.'),
    ),
  );
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function ebr_form_user_register_form_alter(&$form, &$form_state, $id) {
  $form['message'] = array(
    '#type' => 'item',
    '#markup' => ebr_internal_content_get_markup("user-register-form-message"),
    '#weight' => -100,
  );
}

/**
 * Loads markup from a stored internal_text content node
 * using a specified key.
 */
function ebr_internal_content_get_markup($key) {
  $node = node_load(db_query("SELECT {entity_id} FROM {field_data_field_content_key} 
                              WHERE field_content_key_value = '$key' 
                              AND bundle = 'internal_text'")->fetchField());
  if (!empty($node)) {
    return $node->body['und'][0]['safe_value'];
  }
  return '';
}


/////////////////////////////////////
// Template preprocessing
/////////////////////////////////////

function ebr_preprocess_page(&$variables) {
	if (_ebr_user_is_reviewer() && drupal_is_front_page()) {
		drupal_set_message(ebr_internal_content_get_markup('p2p-reviewer-welcome-message'));
	}
}

function ebr_preprocess_node(&$variables, $hook) {
  
  	// Set "unpublished" flag for all nodes
  	$variables['unpublished'] = (!$variables['status']) ? TRUE : FALSE;
  	
	// Essay node
	if ($variables['node']->type == 'essay') {
		// Full node display
		if ($variables['view_mode'] == 'full') {
			$essay = $variables['node'];
			$variables['workflow_state'] = _ebr_get_workflow_state_label($essay);
			$body_weight = intval($variables['content']['body']['#weight']);
			// Add the reviewed books view block before the main essay content.
			$variables['content']['books_reviewed'] = array(
				'#weight' => strval($body_weight),
				'#markup' => views_embed_view('essay_reviewed_books', 'default', $essay->nid),
			);
			$body_weight += 1;
			$variables['content']['body']['#weight'] = strval($body_weight);
		}
		// Hide empty source_url field if it is empty. For some reason 
		// the link field type is not doing this automatically.
		if (!empty($variables['content']['field_source_url']['#items']) && empty($variables['content']['field_source_url']['#items'][0]['url'])) {
		  unset($variables['content']['field_source_url']);
		}
	}
}


/////////////////////////////////////
// Utilities
/////////////////////////////////////

function _ebr_render_field($node, $field_name, $display_mode=NULL) {
	if (isset($node->$field_name)) {
		return render(field_view_field('node', $node, $field_name, $display_mode));
	}
}

function _ebr_get_field_value($node, $field_name) {
  $items = field_get_items('node', $node, $field_name);
  if (!empty($items)) {
    if (sizeof($items) == 1) {
      return isset($items[0]['nid']) ? $items[0]['nid'] : $items[0]['value'];
    } else {
      foreach ($items as $item) {
        $values[]= isset($items[0]['nid']) ? $items[0]['nid'] : $items[0]['value'];
      }
      return $values;
    }
  }
}

function _ebr_is_node_page($type) {
  $page_node = menu_get_object();
  return !empty($page_node) && isset($page_node->type) && $page_node->type == $type;
}