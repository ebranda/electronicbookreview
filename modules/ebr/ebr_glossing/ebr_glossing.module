<?php

// TODO create gloss content type if it doesn't exist?

// TODO Move these into module settings
global $glossable_node_types;
global $gloss_node_type;
$glossable_node_types = array('essay');
$gloss_node_type = 'gloss';
global $gloss_left;
$gloss_left = 490;

function _ebr_allow_glossing($node) {
  	return _is_glossable($node) && user_is_logged_in(); // TODO put this into permissions framework rather than hard-coding here
}

// TODO generalize using permissions
function _ebr_can_publish_glosses() {
	return _ebr_user_is_editor();
}

function _is_glossable($node) {
	global $glossable_node_types;
	return in_array($node->type, $glossable_node_types);
}

function _is_gloss($node) {
	global $gloss_node_type;
	return $node->type == $gloss_node_type;
}



/**
 * Sets up the node page for the entity being glossed
 */
function ebr_glossing_preprocess_node(&$variables, $hook) {
	
  	$node = $variables['node'];
	global $glossable_node_types;
  	if (_is_glossable($node) && $variables['view_mode'] == 'full') { // TOOD view_mode is specific to ebr.module. Generalize this.
		
		$params = drupal_get_query_parameters();
		$gloss_nid = empty($params['gloss']) ? 0 : $params['gloss'];
		$settings = array(
			'zIndex' => 10000, 
			'nid' => $node->nid,
			'startState' => 1,
			'showGlossNid' => $gloss_nid,
			'canAddGlosses' => _ebr_allow_glossing($node),
		);
		global $gloss_left; // TODO use variable_get from module settings
		if (is_numeric($gloss_left)) {
			$settings['glossLeft'] = $gloss_left;
		}
		
		drupal_add_js(array('ebr_glossing' => $settings), 'setting');
		$variables['classes_array'][] = 'glossable';
		$glosses = _glosser_load_glosses($node->nid);
		$variables['content']['glosses']['#markup'] = _glosser_format_glosses($glosses);
		$variables['content']['glosses']['#weight'] = intval($variables['content']['body']['#weight']) + 1;
		
		if (_ebr_allow_glossing($node)) {
			//drupal_add_js(drupal_get_path('module', 'ebr_glossing') .'/rangy-core.js');
			// Add a single empty gloss link base element to node content render array.
			// The Dialog API requires that this be rendered, not output directly as HTML.
			$variables['content']['add_gloss']['#attached']['library'] = array(array('dialog', 'dialog'));
			$variables['content']['add_gloss']['link']['#markup'] = 
				'<div id="gloss-add"></</div><div>&lt; '.
				l('Write a gloss here', 'glosses/nojs/glossform', 
					array('html' => true, 'attributes' => array('class' => array('use-dialog', 'use-ajax'))
				)).'</div></div>';
		}
		
	} else if (_is_gloss($node)) {
		// Add the colon suffix to the gloss author name
		if (!empty($variables['content']['field_author_name'])) {
			$variables['content']['field_author_name'][0]['#markup'] = $variables['content']['field_author_name'][0]['#markup'] . ":";
		}
		if ($node->status != 1 && _ebr_can_publish_glosses()) {
			$variables['content']['admin_footer']['#markup'] = l("Approve this gloss", "glosses/approve/".$node->nid."/".$node->field_essay['und'][0]['nid']);
			$variables['content']['admin_footer']['#weight'] = intval($variables['content']['body']['#weight']) + 1;
		}
		// Add the path value as a hidden element in the render array.
		$path = $node->field_gloss_path['und'][0]['value'];
		$variables['content']['path']['#markup'] = '<div class="gloss-path" style="display:none;">'.$path.'</div>'; 
	}
}

function _glosser_load_glosses($nid) {
	$sql = "SELECT field_data_field_gloss_path.field_gloss_path_value AS field_data_field_gloss_path_field_gloss_path_value, 
					field_data_field_publication_date.field_publication_date_value AS field_data_field_publication_date_field_publication_date_val, node.nid AS nid
	FROM {node} node
	LEFT JOIN {field_data_field_essay} field_data_field_essay ON node.nid = field_data_field_essay.entity_id AND (field_data_field_essay.entity_type = 'node' AND field_data_field_essay.deleted = '0')
	LEFT JOIN {field_data_field_gloss_path} field_data_field_gloss_path ON 
					node.nid = field_data_field_gloss_path.entity_id AND (field_data_field_gloss_path.entity_type = 'node' AND field_data_field_gloss_path.deleted = '0')
	LEFT JOIN {field_data_field_publication_date} field_data_field_publication_date ON 
					node.nid = field_data_field_publication_date.entity_id AND (field_data_field_publication_date.entity_type = 'node' AND field_data_field_publication_date.deleted = '0')
	WHERE (( (field_data_field_essay.field_essay_nid = :nid) )AND(( (node.type IN  ('gloss')) )))
	ORDER BY field_data_field_gloss_path_field_gloss_path_value ASC, field_data_field_publication_date_field_publication_date_val DESC";
	$result = db_query($sql, array(':nid' => $nid));
	$groups = array();
	foreach ($result as $row) {
		$gloss = node_load($row->nid);
		if ($gloss->status == 1 || _ebr_can_publish_glosses()) {
			$path = $gloss->field_gloss_path['und'][0]['value'];
			$groups[$path][] = $gloss;
		}
	}
	return $groups;
}

function _glosser_format_glosses($groups) {
	$output = '';
	foreach ($groups as $path => $glosses) {
		$output .= '<div class="gloss-path-group">';
		$output .= 		'<div class="path" style="display:none;">'.$path.'</div>';
		foreach ($glosses as $gloss) {
			$gloss_view = node_view($gloss, 'teaser');
			$output .= '   '.render($gloss_view);
		}
		$output .= '</div><!--/ gloss-path-group -->';
	}
	return $output;
}

/**
 * Implements hook_menu().
 */
function ebr_glossing_menu() {	
	$items['glosses/set-path/%/%'] = array(
	   'type' => MENU_CALLBACK,
	   'page callback' => '_set_path_ajax_callback',
	   'page arguments' => array(2, 3),
	   'access arguments' => array('create gloss content'),
	);
	$items['glosses/%dialog_js/glossform'] = array(
	   'title' => 'Gloss form',
	   'type' => MENU_CALLBACK,
	   'page callback' => '_gloss_form_ajax_callback',
	   'page arguments' => array(1, 3),
	   'access arguments' => array('create gloss content'),
	);
	$items['glosses/approve/%/%'] = array(
	   'type' => MENU_CALLBACK,
	   'page callback' => '_ebr_approve_gloss',
	   'page arguments' => array(2, 3),
	   'access arguments' => array('create gloss content'), // TODO set correct permission
	);
	return $items;
}

/**
 * Stores values received via an ajax call in the user session.
 * Because Dialog API configures ajax handling when the link is first 
 * rendered, we can't dynamically generate the path link in JS. Instead, 
 * we need to set it in the user session via an ajax call so that we can
 * retrieve it from the form callback function.
 */
function _set_path_ajax_callback($nid, $path) {
	if (!isset($_SESSION['ebr_glossing'])) {
	    $_SESSION['ebr_glossing'] = array();
	}
	$_SESSION['ebr_glossing']['nid']['#value'] = $nid;
	$_SESSION['ebr_glossing']['path']['#value'] = $path;
	ajax_deliver(null);
}

/**
 * Menu callback for creating our form via AJAX. This function
 * will call the drupal_get_form form builder function.
 */
function _gloss_form_ajax_callback($ajax) {
	$params = drupal_get_query_parameters();
	$nid = $_SESSION['ebr_glossing']['nid']['#value'];
	$path = $_SESSION['ebr_glossing']['path']['#value'];
	$form = drupal_get_form('ebr_gloss_form', $nid, $path);
  	// If we're using JavaScript, display the content within the dialog.
  	if ($ajax) {
    	// Options that are passed to the jQuery UI dialog. See the jQuery UI
	    // website for more available options: http://jqueryui.com/demos/dialog/
	    $options = array(
	      'width' => '600px',
	      'position' => 'center',
	      'title' => t('Add a gloss'),
	    );
	    $commands = array();
	    $commands[] = dialog_command_display($form, $options);
	    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  	} else {
    	// If the user isn't using JavaScript, just show the normal page.
    	return $form;
  	}
}

/**
 * Menu callback for approving a gloss.
 */
function _ebr_approve_gloss($nid, $essay_nid) {
	$gloss = node_load($nid);
	if ($gloss && $gloss->status == 0) {
		$gloss->status = 1;
		node_save($gloss);
	}
	drupal_goto(_ebr_essay_path($essay_nid), array("query"=>array("gloss"=>$nid))); // TODO when changing this to ajax, return the rendered gloss content
}

/**
 * The form builder function. If the form is new then
 * a new form is created. If it has been submitted then
 * a confirmation message is displayed.
 */
function ebr_gloss_form($form, &$form_state, $nid, $path) {
	if (empty($form_state['values'])) { // If form is being built
		// nid hidden field
		$form['nid'] = array(
			'#type' => 'hidden',
			'#value' => $nid,
		);
		// Path hidden field
		$form['path'] = array(
			'#type' => 'hidden',
			'#value' => $path,
		);
		// Gloss author
		$form['name'] = array(
			'#title' => t('Your name'),
			'#type' => 'textfield',
			'#required' => TRUE,
		);
		// Gloss content
		$form['body'] = array(
			'#title' => t('Gloss (150 words max.)'),
			'#type' => 'textarea',
			'#required' => TRUE,
			'#suffix' => '<div class="help">Use <a href="http://daringfireball.net/projects/markdown/basics" target="_blank">Markdown syntax</a> '.
							'if you want to add elements like hyperlinks or bold face.<br /><br />'.
							'<strong>Examples:</strong><br />'.
							'This is an [example hyperlink](http://example.com/)</span><br />'.
							'The following text *is emphasized*'.
							'</div>',
		);
		$form['submit'] = array(
			'#type' => 'submit',
			'#value' => 'Submit gloss',
		);
		// Set up the ajax
		$form['dialog_display'] = array('#type' => 'value', '#value' => TRUE);
	    $form['#prefix'] = '<div id="dialog-form-wrapper">';
	    $form['#suffix'] = '</div>';
		$form['submit']['#ajax'] = array(
	        'callback' => 'drupal_render',
	        'wrapper' => 'dialog-form-wrapper',
	    );
		$form['#process'][] = 'dialog_process_ajax_form';
		// Define the submit handler
		$form['#submit'][] = 'ebr_ajax_gloss_form_submit';
	} else { // Form was submitted to display the result message set in the submit handler
		$form['submission'] = array(
	    	'#markup' => $form_state['result_message'],
	    );
	}
	return $form; 
}

/**
 * The form submit handler. Only gets called if validation passes.
 */
function ebr_ajax_gloss_form_submit($form, &$form_state) {
	$nid = intval($form_state['values']['nid']);
	$path = $form_state['values']['path'];
	$name = $form_state['values']['name'];
	$body = $form_state['values']['body'];
	$body_html = _filter_markdown($body, 'default'); // Depends on the Markdown module
	$gloss = _create_gloss($nid, $path, $name, $body_html);
	$form_state['rebuild'] = TRUE;
	$node = node_load($nid);
	$form_state['result_message'] = "The following gloss of <strong>".$node->title."</strong> has been submitted for review. We will get back to you shortly.";
	$form_state['result_message'] .= '<div class="body">'.$body_html.'</div>';
	$form_state['result_message'] .= '<div class="info">Submitted by '.$name.' on '.date('l jS \of F Y h:i:s A').'</div>';
	$form_state['result_message'] .= '<div class="body">'.l('Close window and refresh page', _ebr_essay_path($nid), array("query"=>array("gloss"=>$gloss->nid))).' to see your gloss</div>';
}

/**
 * Helper function to create the new gloss.
 */
function _create_gloss($nid, $path, $author_name, $body) {
	
	// TODO this should be a hook because we will need to define the node type on the fly
	$node = new stdClass();
	global $gloss_node_type;
	$node->type = $gloss_node_type;
	node_object_prepare($node);
	$node->language = LANGUAGE_NONE;
	$node->title = "Gloss by $author_name on ".date("y.m.d");
	global $user;
	$node->uid = $user->uid;
	$node->status = _ebr_can_publish_glosses() ? 1 : 0;
	$node->body[$node->language][0]['value']   = $body;
	$node->body[$node->language][0]['format']  = 'full_html';
	$node->field_publication_date[$node->language][0]['value'] = date("Y-m-d");
	$node->field_essay[$node->language][0]['nid'] = $nid; // TODO generalize so that field is "field_node"
	$node->field_gloss_path[$node->language][0]['value'] = $path;
	$node->field_author_name[$node->language][0]['value'] = $author_name;
	if ($node = node_submit($node)) {
		node_save($node);
	}
	
	// Now insert the marker into the target node body at the path location
	// DON'T do this. It is destructive editing of the essay body.
	// if (!empty($path)) {
	// 		$gloss_nid = $node->nid;
	// 		$target_node = node_load($nid);
	// 		$altered = _insert_gloss_marker($path, $target_node->body['und'][0]['value'], $gloss_nid);
	// 		$target_node->body['und'][0]['value'] = $altered;
	// 		node_save($target_node);
	// 	}
	
	return $node;
}

/*
function _insert_gloss_marker($css_selector_path, $body, $nid) {
	$segments = explode(' > ', $css_selector_path);
	$dom = new DOMDocument();
	$dom->loadXML('<root>'.$body.'</root>');
	$node = $dom->getElementsByTagName('root')->item(0);
	foreach ($segments as $segment) {
		$node = _get_child_node($segment, $node);
	}
	$marker = $dom->createElement("span", $nid);
	$marker->setAttribute('class', 'gloss-ref');
	$marker->setAttribute('id', 'gloss-ref-'.$nid);
	$node->appendChild($marker);
	$xml = $dom->saveXML();
	$xml = substr($xml, strpos($xml, '<root>')+6);
	$xml = substr($xml, 0, strpos($xml, '</root>'));
	return $xml;
}

function _get_child_node($css_selector, $dom_node) {
	$element_name = substr($css_selector, 0, strpos($css_selector, ':'));
	$index = intval(substr($css_selector, strpos($css_selector, '(')+1, strpos($css_selector, ')')));
	if ($dom_node->childNodes->length) { 
		$i = 1;
		foreach($dom_node->childNodes as $n) { 
			if (strtolower($n->nodeName) == strtolower($element_name)) {
				if ($i == $index) return $n;
				$i++;
			}
		}
	}
}
*/

// function _glossing_insert_reference($html, $path, $gloss_nid) {
// 	$pre = substr($html, 0, $path);
// 	if (strrpos($pre, '>') < strrpos($pre, '<')) {
// 		// We are inside an html tag so shift backward to the start of the tag.
// 		$path = strrpos($pre, '<');
// 		$pre = substr($html, 0, $path);
// 	}
// 	$post = substr($html, $path);
// 	return $pre . '<span class="gloss-ref" id="gloss-ref-'.$gloss_nid.'">'.$gloss_nid.'</span>' . $post;
// }


/**
 * Implements hook_menu().
 */
function ebr_glossing_node_delete($node) {
	if (_is_glossable($node)) {
		// TODO $sql = "SELECT nid FROM FROM {node} node WHERE "
	}
}




